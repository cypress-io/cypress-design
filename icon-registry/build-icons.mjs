/**
 * Generate icons.js and icons.d.ts
 * Also creates barrel files index.js and index.d.ts
 * Needs to be run last since it will override the dummy `icons` files generated by tsc
 */

import { fileURLToPath } from 'url';
import * as path from 'path';
const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

import { globby } from 'globby';
import { promises as fs } from 'fs';
import camelCase from 'camelcase';
import dedent from 'dedent';
import { colors } from '@cypress-design/css';

async function getIcons() {
  const icons = await globby('*.svg', {
    cwd: path.join(__dirname, './icons'),
  });
  const iconsObject = await Promise.all(
    icons.map(async (icon) => {
      const iconName = icon.replace(/.svg$/, '');
      const [snakeCaseName, size] = iconName.split('_x');
      const svgContent = await fs.readFile(
        path.join(__dirname, './icons', icon),
        'utf8'
      );
      svgContent;
      return {
        interfaceName: `Icon${camelCase(snakeCaseName, {
          pascalCase: true,
        })}Props`,
        snakeCaseName,
        size,
        hasstrokeColor: /icon-stroke/.test(svgContent),
        hasfillColor: /icon-fill/.test(svgContent),
        hasSecondaryfillColor: /icon-fill-secondary/.test(svgContent),
        hasSecondarystrokeColor: /icon-stroke-secondary/.test(svgContent),
      };
    })
  );
  const iconsObjectSet = new Set();
  const iconsObjectUnique = iconsObject.reduce((acc, curr) => {
    if (!iconsObjectSet.has(curr.interfaceName)) {
      iconsObjectSet.add(curr.interfaceName);
      acc.push({ ...curr, availableSizes: [curr.size] });
    } else {
      const index = acc.findIndex(
        (item) => item.interfaceName === curr.interfaceName
      );
      acc[index].availableSizes.push(curr.size);
      acc[index].hasstrokeColor |= curr.hasstrokeColor;
      acc[index].hasfillColor |= curr.hasfillColor;
    }
    return acc;
  }, []);

  iconsObjectUnique.forEach((icon) => {
    icon.availableSizes = icon.availableSizes.sort((a, b) =>
      parseInt(a) > parseInt(b) ? 1 : -1
    );
  });

  await ensureDistExist();
  await generateIndex(iconsObjectUnique);
}

async function ensureDistExist() {
  try {
    await fs.mkdir('./dist/');
  } catch (err) {
    if (err && err.code != 'EEXIST') {
      throw err;
    }
  }
}

async function generateIndex(iconsObjectUnique) {
  const indexFileContent = iconsObjectUnique
    .map((icon) => {
      const {
        snakeCaseName,
        availableSizes,
        hasfillColor,
        hasstrokeColor,
        hasSecondaryfillColor,
        hasSecondarystrokeColor,
      } = icon;
      // prettier-ignore
      return dedent`'${snakeCaseName}': {
          availableSizes: ['${availableSizes.join('\', \'')}'],
          hasfillColor: ${Boolean(hasfillColor)},
          hasstrokeColor: ${Boolean(hasstrokeColor)},
          hasSecondaryfillColor: ${Boolean(hasSecondaryfillColor)},
          hasSecondarystrokeColor: ${Boolean(hasSecondarystrokeColor)},
      }`;
    })
    .join(',\n');

  const typesFileContent = iconsObjectUnique
    .map((icon) => {
      // prettier-ignore
      return dedent`export interface ${icon.interfaceName} {
          name: '${icon.snakeCaseName}';
          size?: '${icon.availableSizes.join('\' | \'')}';${icon.hasstrokeColor ? `
          strokeColor?: WindiColor;`: ''}${icon.hasfillColor ? `
          fillColor?: WindiColor;` : ''}${icon.hasSecondarystrokeColor ? `
          secondaryStrokeColor?: WindiColor;` : ''}${icon.hasSecondaryfillColor ? `
          secondaryFillColor?: WindiColor;` : ''}
      }`;
    })
    .join('\n\n');

  await fs.writeFile(
    './src/icons.ts',
    dedent`
  // THIS FILE IS AUTO GENERATED BY build-icons.mjs
  // it will be used to determine size if no size is provided

  export var icons = {${indexFileContent}} as const;

  type WindiColor = '${Object.keys(colors)
    .reduce((acc, color) => {
      if (typeof colors[color] !== 'object') {
        return acc;
      }
      const completeColors = Object.keys(colors[color]).map((key) => {
        return `${color}${key !== 'DEFAULT' ? `-${key}` : ''}`;
      });
      return [].concat(acc, completeColors);
    }, [])
    .join(`' | '`)}';
    
  export type IconProps = ${iconsObjectUnique
    .map((icon) => icon.interfaceName)
    .join(' | ')}

  ${typesFileContent}
    `
  );
}

getIcons();
