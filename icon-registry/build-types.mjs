import { fileURLToPath } from 'url';
import * as path from 'path';
const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

import { globby } from 'globby';
import { promises as fs } from 'fs';
import camelCase from 'camelcase';
import dedent from 'dedent';
import { colors } from '@cypress-design/css';

async function getIcons() {
  const icons = await globby('*.svg', {
    cwd: path.join(__dirname, './icons'),
  });
  const iconsObject = await Promise.all(
    icons.map(async (icon) => {
      const iconName = icon.replace(/.svg$/, '');
      const [snakeCaseName, size] = iconName.split('_x');
      const svgContent = await fs.readFile(
        path.join(__dirname, './icons', icon),
        'utf8'
      );
      svgContent;
      return {
        interfaceName: camelCase(snakeCaseName, { pascalCase: true }),
        snakeCaseName,
        size,
        hasDarkColor: /icon-dark/.test(svgContent),
        hasLightColor: /icon-light/.test(svgContent),
      };
    })
  );
  const iconsObjectSet = new Set();
  const iconsObjectUnique = iconsObject.reduce((acc, curr) => {
    if (!iconsObjectSet.has(curr.interfaceName)) {
      iconsObjectSet.add(curr.interfaceName);
      acc.push({ ...curr, size: [curr.size] });
    } else {
      const index = acc.findIndex(
        (item) => item.interfaceName === curr.interfaceName
      );
      acc[index].size.push(curr.size);
      acc[index].hasDarkColor |= curr.hasDarkColor;
      acc[index].hasLightColor |= curr.hasLightColor;
    }
    return acc;
  }, []);
  await ensureDistExist();
  await generateType(iconsObjectUnique);
  await generateIndex(iconsObjectUnique);
}

async function ensureDistExist() {
  try {
    await fs.mkdir('./dist/');
  } catch (err) {
    if (err && err.code != 'EEXIST') {
      throw err;
    }
  }
}

async function generateIndex(iconsObjectUnique) {
  const indexFileContent = iconsObjectUnique
    .map((icon) => {
      // prettier-ignore
      return dedent`{
          iconId: "${icon.snakeCaseName}",
          size: ["${icon.size.join('", "')}"],
          darkColor: ${Boolean(icon.hasDarkColor)},
          lightColor: ${Boolean(icon.hasLightColor)}
      }`;
    })
    .join(',\n');

  await fs.writeFile(
    './dist/index.js',
    dedent`
  // THIS FILE IS AUTO GENERATED BY build.mjs

  export * from './iconsList'

  export const icons = [${indexFileContent}];
    `
  );
}

async function generateType(iconsObjectUnique) {
  const typesFileContent = iconsObjectUnique
    .map((icon) => {
      // prettier-ignore
      return dedent`interface ${icon.interfaceName} {
          iconId: "${icon.snakeCaseName}";${icon.size.length > 1 ? `
          size?: ${icon.size.join(' | ')};` : ''}${icon.hasDarkColor ? `
          darkColor?: WindiColor`: ''}${icon.hasLightColor ? `
          lightColor?: WindiColor` : ''}
      }`;
    })
    .join('\n\n');

  await fs.writeFile(
    './dist/index.d.ts',
    dedent`
  // THIS FILE IS AUTO GENERATED BY build.mjs

  export * from './iconsList'

  export declare const icons: Array<Omit<Icon, 'darkColor' | 'lightColor'> & {
    darkColor: boolean,
    lightColor: boolean
  }>;

  type WindiColor = '${Object.keys(colors)
    .reduce((acc, color) => {
      if (typeof colors[color] !== 'object') {
        return acc;
      }
      const completeColors = Object.keys(colors[color]).map((key) => {
        return `${color}${key !== 'DEFAULT' ? `-${key}` : ''}`;
      });
      return [].concat(acc, completeColors);
    }, [])
    .join(`' | '`)}';
    
  export type Icon = ${iconsObjectUnique
    .map((icon) => icon.interfaceName)
    .join(' | ')}

  ${typesFileContent}
    `
  );
}

getIcons();
